class Solution {
public:
    int dfs(vector<vector<int>>& grid, int row, int col) {
    int fish = grid[row][col];
    grid[row][col] = 0;  // mark as visited
    int max_fish = fish;
    int num_rows = grid.size();
    int num_cols = grid[0].size();
    vector<pair<int, int>> directions = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    for (auto [drow, dcol] : directions) {
        int new_row = row + drow;
        int new_col = col + dcol;
        if (new_row >= 0 && new_row < num_rows && new_col >= 0 && new_col < num_cols && grid[new_row][new_col] > 0) {
            max_fish += dfs(grid, new_row, new_col);
        }
    }
    return max_fish;
}

int findMaxFish(vector<vector<int>>& grid) {
    int max_fish = 0;
    int num_rows = grid.size();
    int num_cols = grid[0].size();
    for (int row = 0; row < num_rows; row++) {
        for (int col = 0; col < num_cols; col++) {
            if (grid[row][col] > 0) {
                max_fish = max(max_fish, dfs(grid, row, col));
            }
        }
    }
    return max_fish;
}

};
