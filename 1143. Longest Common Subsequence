class Solution {
public:
    int ans(string text1, string text2, int m, int n){
        if(m==0 || n==0)
            return 0;
        if(text1[m-1]==text2[n-1])
            return 1+ans(text1,text2,m-1,n-1);
        else
            return max(ans(text1,text2,m,n-1), ans(text1,text2,m-1,n));
    }
    int longestCommonSubsequence(string text1, string text2) {

        int m = text1.size();
        int n = text2.size();

        int dp[m+1][n+1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else if (text1[i - 1] == text2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }

        int it = dp[m][n];
        char longestCommonSubsequence[it + 1];
        longestCommonSubsequence[it] = '\0';

        int i = m, j = n;
        while (i > 0 && j > 0) {
            if (text1[i - 1] == text2[j - 1]) {
            longestCommonSubsequence[it - 1] = text1[i - 1];
            i--;
            j--;
            it--;
            }

            else if (dp[i - 1][j] > dp[i][j - 1])
            i--;
            else
            j--;
        } 

        return sizeof(longestCommonSubsequence)-1;

        // return ans(text1, text2, m, n);
        
    }
};
